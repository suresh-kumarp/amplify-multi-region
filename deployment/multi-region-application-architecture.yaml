# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: (SO0085) - This template deploys the Multi Region Application Architecture to the current region and a specified secondary region using CloudFormation StackSets. (Version SOLUTION_VERSION)

Parameters:

  SecondaryRegion:
    Type: String

  AdminName:
    Type: String
    Description: User name for the admin cognito user account that will be created when this solution is provisioned
    MinLength: 4 
    MaxLength: 20 
    AllowedPattern: '[a-zA-Z0-9-]+'
    ConstraintDescription: "AdminName must be a minimum of 4 characters and cannot include spaces"

  AdminEmail:
    Type: String
    Description: Email address for the admin cognito user account that will be created when this solution is provisioned
    MinLength: 5 
    AllowedPattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' 
    ConstraintDescription: "AdminEmail must be a valid email address"

  AdminPhoneNumber:
    Type: String
    Description: Phone Number for the admin cognito user account that will be created when this solution is provisioned specified in the format +12345678999
    MinLength: 12 
    MaxLength: 12 

Mappings:
  SourceCode:
    General:
      S3Bucket: CODE_BUCKET
      KeyPrefix: SOLUTION_NAME/SOLUTION_VERSION
  
  Solution:
    Metrics:
      SendAnonymousData: "Yes"

Resources:

  # Custom Policy for Stack Provisioning
  StackCreationPolicies:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/multi-region-application-architecture-layers.template"
        - S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          KeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      Parameters:
        ParentStackName: !GetAtt StackNameFormatter.Value
        ProvisionStackPolicy: 'Yes'
        SecondaryRegion: !Ref SecondaryRegion
        AdminName: !Ref AdminName
        AdminEmail: !Ref AdminEmail
        AdminPhoneNumber: !Ref AdminPhoneNumber
        AppId: !GetAtt UuidGenerator.APP_ID
        BucketNameToken: !GetAtt UuidGenerator.BUCKET_NAME_TOKEN
        PrimaryConsoleBucket: !GetAtt PresentationConfigurer.PrimaryBucketName
        SecondaryConsoleBucket: !GetAtt PresentationConfigurer.SecondaryBucketName
        UIDomainName: !Sub https://${ConsoleCloudFront.DomainName}
        SendAnonymousData: !FindInMap ["Solution" ,"Metrics" ,"SendAnonymousData"]
        SolutionUuid: !GetAtt UuidGenerator.SOLUTION_UUID

  StackSetResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt StackSetResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "stackset-resource.zip"]]
      Runtime:  nodejs12.x
      Timeout: 900
  
  StackNameFormatterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt StackNameFormatterRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "stack-name-formatter.zip"]]
      Runtime:  nodejs12.x
      Timeout: 30

  StackNameFormatterRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >- 
              logs:CreateLogGroup/CreateLogStream/PutLogEvents - requires trailing * on resource to avoid creating a circular dependency between resources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-StackNameFormatterRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*

  # The CfnExecRole allows CloudFormation to provision Stack Resources in each region specified
  CfnExecRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >- 
              sns:* - CloudFormation StackSets requires * resource
              cloudformation:* - CloudFormation StackSets requires * resource
          - id: F3
            reason: >- 
              cloudformation:*, sns:* - The CfnExec role will be assumed by CloudFormation as it provisions StackSet resources. Permissions to CloudFormation and SNS are needed to perform actions and report status
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt StackCreationPolicies.Outputs.RoutingLayerPolicy
        - !GetAtt StackCreationPolicies.Outputs.AppLayerPolicy
        - !GetAtt StackCreationPolicies.Outputs.KeyValueStoreLayerPolicy
        - !GetAtt StackCreationPolicies.Outputs.ObjectStoreLayerPolicy
        - !GetAtt StackCreationPolicies.Outputs.IdentityLayerPolicy
      Policies:
        # The Base Policy that all CfnExecRole must have to allow it to take CloudFormation actions and communicate status
        - PolicyName: !Sub ${AWS::StackName}-BaseCfnExecutionRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  # Allow the StackSet to get nested templates and lambda packages for this solutions s3 bucket/prefix
                  - !Join ["", ["arn:aws:s3:::", !FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region", "/", !FindInMap ["SourceCode", "General", "KeyPrefix"], "/*"]]
                  - !Join ["", ["arn:aws:s3:::", !FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "SecondaryRegion", "/", !FindInMap ["SourceCode", "General", "KeyPrefix"], "/*"]]
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:StackSet-${StackNameFormatter.Value}* 
                  - !Sub arn:aws:lambda:${SecondaryRegion}:${AWS::AccountId}:function:StackSet-${StackNameFormatter.Value}* 
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/StackSet-${StackNameFormatter.Value}* 

  # The CfnAdminRole allows CloudFormation to assume the role necessary to provision Stack Resources
  CfnAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CfnAdminRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !GetAtt CfnExecRole.Arn

  # The StackSetResourceRole allows the StackSet Custom Resource to pass the CfnAdminRole to CloudFormation to perform StackSet 
  StackSetResourceRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >- 
              This role will need to perform all cloudformation and s3:Get/s3:List actions on a number of resources that will be created by the solution's underlying layers. Specific ARNs or resource names cannot be determined when this role is created
          - id: F3
            reason: >- 
              cloudformation:* - CloudFormation will need to assume a role when a StackSet Resource is deployed. That role will need access to all CloudFormation permissions
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-StackSetResourceRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt CfnAdminRole.Arn

  StackNameFormatter:
    Type: Custom::StackNameFormatter
    Properties:
      ServiceToken: !GetAtt StackNameFormatterLambda.Arn
      StackName: !Sub ${AWS::StackName}

  UuidGeneratorRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >- 
              logs:CreateLogGroup/CreateLogStream/PutLogEvents - requires trailing * on resource to avoid creating a circular dependency between resources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-UuidGeneratorRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*

  UuidGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt UuidGeneratorRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "uuid-generator.zip"]]
      Runtime:  nodejs12.x
      Timeout: 30

  UuidGenerator:
    Type: Custom::UuidGenerator
    Properties:
      ServiceToken: !GetAtt UuidGeneratorLambda.Arn

  StackSetResource:
    Type: Custom::StackSetResource
    Properties:
      ServiceToken: !GetAtt StackSetResourceLambda.Arn

      # Parameters supplied to the CreateStackSet API Call
      StackSetName: !Sub ${StackNameFormatter.Value}-StackSetResource
      AdministrationRoleARN: !GetAtt CfnAdminRole.Arn
      ExecutionRoleName: !Ref CfnExecRole
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/multi-region-application-architecture-layers.template"
        - S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          KeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      Capabilities: 
        - CAPABILITY_IAM
      Parameters:
        - SecondaryRegion: !Ref SecondaryRegion
        - ParentStackName: !GetAtt StackNameFormatter.Value
        - AdminName: !Ref AdminName
        - AdminEmail: !Ref AdminEmail
        - AdminPhoneNumber: !Ref AdminPhoneNumber
        - AppId: !GetAtt UuidGenerator.APP_ID
        - BucketNameToken: !GetAtt UuidGenerator.BUCKET_NAME_TOKEN
        - PrimaryConsoleBucket: !GetAtt PresentationConfigurer.PrimaryBucketName
        - SecondaryConsoleBucket: !GetAtt PresentationConfigurer.SecondaryBucketName
        - UIDomainName: !Sub https://${ConsoleCloudFront.DomainName}
        - SendAnonymousData: !FindInMap ["Solution" ,"Metrics" ,"SendAnonymousData"]
        - SolutionUuid: !GetAtt UuidGenerator.SOLUTION_UUID

      # Parameters supplied to the CreateStackInstances API Call
      Accounts:
        - !Ref AWS::AccountId 
      Regions:
        - !Ref AWS::Region
        - !Ref SecondaryRegion
      OperationPreferences:
        RegionOrder:
          - !Ref SecondaryRegion
          - !Ref AWS::Region
        FailureToleranceCount: 0
        MaxConcurrentCount: 1

  PrimaryConsoleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !GetAtt PresentationConfigurer.PrimaryBucketName
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt ConsoleOriginAccessIdentity.S3CanonicalUserId
            Action: 
              - s3:GetObject
            Resource: 
              - !Sub arn:aws:s3:::${PresentationConfigurer.PrimaryBucketName}/*

  ConsoleOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${PresentationConfigurer.PrimaryBucketName}

  ConsoleCloudFront:
   Type: AWS::CloudFront::Distribution
   Metadata:
    cfn_nag:
      rules_to_suppress:
        - id: W70
          reason: "CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)"
   Properties:
     DistributionConfig:
       Comment: "Website distribution for solution"
       Logging:
         IncludeCookies: false
         Bucket: !Sub ${PresentationConfigurer.PrimaryLogBucketName}.s3.${AWS::Region}.amazonaws.com
         Prefix: cloudfront-logs/
       Origins:
         - Id: console
           DomainName: !Sub ${PresentationConfigurer.PrimaryBucketName}.s3.${AWS::Region}.amazonaws.com
           OriginPath: /console
           S3OriginConfig:
             OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${ConsoleOriginAccessIdentity}
       DefaultCacheBehavior:
         TargetOriginId: console
         AllowedMethods:
           - GET
           - HEAD
           - OPTIONS
         CachedMethods:
           - GET
           - HEAD
           - OPTIONS
         ForwardedValues:
           QueryString: false
         ViewerProtocolPolicy: redirect-to-https
       IPV6Enabled: true
       DefaultRootObject: index.html
       ViewerCertificate:
         CloudFrontDefaultCertificate: true
       Enabled: true
       HttpVersion: http2

  PresentationConfigurerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: CFN Lambda backed custom resource to create buckets for the Presentation Layer and copy the files into them
      Handler: index.handler
      Role: !GetAtt PresentationConfigurerRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "presentation-configurer.zip"]]
      Runtime:  nodejs12.x
      Timeout: 300

  PresentationConfigurerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "/* required to get/put objects to Amazon S3"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackNameFormatter.Value}-PresentationConfigurerPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:PutEncryptionConfiguration
                  - s3:PutBucketVersioning
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetBucketAcl
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketWebsite
                  - s3:PutBucketPolicy
                  - s3:DeleteBucketPolicy
                Resource:
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${AWS::Region}
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${SecondaryRegion}
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${AWS::Region}-logs
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${SecondaryRegion}-logs
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${AWS::Region}/*
                  - !Sub arn:aws:s3:::${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${SecondaryRegion}/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]

  PresentationConfigurer:
    Type: Custom::PresentationConfigurer
    Properties:
      ServiceToken: !GetAtt PresentationConfigurerLambda.Arn
      SrcBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
      SrcPath: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      ManifestFile: console-manifest.json
      FormattedStackName: !Sub ${StackNameFormatter.Value}
      BucketNameToken: !Sub ${UuidGenerator.BUCKET_NAME_TOKEN}
      PrimaryRegion: !Sub ${AWS::Region}
      SecondaryRegion: !Ref SecondaryRegion

Outputs:
  SampleApplicationAppId:
    Value: !GetAtt UuidGenerator.APP_ID
  
  SampleApplicationPrimaryRegionPresentationLayerBucket:
    Value: !Sub ${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${AWS::Region}

  SampleApplicationSecondaryRegionPresentationLayerBucket:
    Value: !Sub ${StackNameFormatter.Value}-presentation-${UuidGenerator.BUCKET_NAME_TOKEN}-${SecondaryRegion}

  AppConfigGlobalTableName:
    Value: !Sub ${StackNameFormatter.Value}-multi-region-app-config

  ConsoleUrl:
    Value: !Sub https://${ConsoleCloudFront.DomainName}
