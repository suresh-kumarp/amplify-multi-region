# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: (SO0085k) - The Multi Region Key Value Store Layer deploys identical DynamoDB tables to Primary and Secondary regions and then uses a CloudFormation Custom Resource to configure them as a DynamoDB Global Table. (Version SOLUTION_VERSION).

Parameters:

  ParentStackName:
    Type: String
    Description: The name of the parent stack passed in when this Stack Instance is created. Used to name/identify resources for the StackSet.

  SecondaryRegion:
    Type: String
    Description: The Secondary Region the backup Cognito User Pool should be created in.

  ProvisionStackPolicy:
    Type: String
    Description: Set this parameter to 'Yes' to provision the IAM Policy necessary to create the resources in this template.
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'

Conditions:

  # When True - The only resource to be provisioned in this template is the StackCreationPolicy resource. 
  ShouldProvisionStackPolicy: !Equals [ !Ref ProvisionStackPolicy, 'Yes' ]

  IsPrimaryRegion: !And
    - !Not [ Condition: IsSecondaryRegion ]
    - !Not [ Condition: ShouldProvisionStackPolicy ]
  IsSecondaryRegion: !And
    - !Equals [ !Ref "AWS::Region", !Ref SecondaryRegion ]
    - !Not [ Condition: ShouldProvisionStackPolicy ]
  IsEitherRegion: !Or
    - Condition: IsPrimaryRegion
    - Condition: IsSecondaryRegion

Mappings:

  SourceCode:
    General:
      S3Bucket: CODE_BUCKET
      KeyPrefix: SOLUTION_NAME/SOLUTION_VERSION

Resources:

  #######################################
  # Stack Creation Custom Policy - Used by 
  # CloudFormation StackSet Execution Role
  # to provision the resources in this template
  #######################################
  StackCreationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: ShouldProvisionStackPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: >- 
              dynamodb:DescribeLimits - requires * to return the provisioned-capacity limits in both the primary and secondary regions. Needed when creating a global table
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:

          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:DescribeTable
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ParentStackName}-key-value-store
              - !Sub arn:aws:dynamodb:${SecondaryRegion}:${AWS::AccountId}:table/${ParentStackName}-key-value-store

          - Effect: Allow
            Action:
              - dynamodb:CreateGlobalTable
            Resource:
              - !Sub arn:aws:dynamodb::${AWS::AccountId}:global-table/${ParentStackName}-key-value-store
          - Effect: Allow
            Action:
              - dynamodb:DescribeLimits
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/*

  #######################################
  # Resources to be deployed to All Regions
  #######################################
  KeyValueStoreTable:
    Type: AWS::DynamoDB::Table
    Condition: IsEitherRegion
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: >- 
              Explicit name needed for creating a global table from the KeyValueStoreTables in each region
    Properties:
      TableName: !Sub ${ParentStackName}-key-value-store
      AttributeDefinitions:
        - AttributeName: commentId
          AttributeType: S
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: commentId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: photoId
          KeySchema:
            - AttributeName: photoId
              KeyType: HASH
          Projection:
              ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      BillingMode: PAY_PER_REQUEST

  #######################################
  # Primary Region Resources
  #######################################

  KeyValueStoreGlobalTableConfigurerLambda:
    Type: AWS::Lambda::Function
    Condition: IsPrimaryRegion
    Properties:
      Handler: index.handler
      Role: !GetAtt KeyValueStoreGlobalTableConfigurerRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "dynamodb-global-table-configurer.zip"]]
      Runtime:  nodejs12.x
      Timeout: 300

  KeyValueStoreGlobalTableConfigurerRole:
    Type: AWS::IAM::Role
    Condition: IsPrimaryRegion
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >- 
              dynamodb:DescribeLimits requires permissions on all resources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ParentStackName}-KeyValueStoreGlobalTableConfigurerPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
              - Effect: Allow
                Action:
                  - dynamodb:CreateGlobalTable
                Resource:
                  - !Sub arn:aws:dynamodb::${AWS::AccountId}:global-table/${ParentStackName}-key-value-store
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ParentStackName}-key-value-store
                  - !Sub arn:aws:dynamodb:${SecondaryRegion}:${AWS::AccountId}:table/${ParentStackName}-key-value-store
              - Effect: Allow
                Action:
                  - dynamodb:DescribeLimits
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*

  KeyValueStoreGlobalTableConfiguration:
    Type: Custom::KeyValueStoreGlobalTableConfiguration
    Condition: IsPrimaryRegion
    Properties:
      ServiceToken: !GetAtt KeyValueStoreGlobalTableConfigurerLambda.Arn
      TableName: !Ref KeyValueStoreTable 
      Regions:
        - !Ref AWS::Region
        - !Ref SecondaryRegion

Outputs:

  StackCreationPolicy:
    Condition: ShouldProvisionStackPolicy
    Value: !Ref StackCreationPolicy

  GlobalTableName:
    Value: !If [ ShouldProvisionStackPolicy, "", !Ref KeyValueStoreTable ]